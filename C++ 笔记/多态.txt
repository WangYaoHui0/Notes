1.多态的概念
	（1）概念：
		- 通俗来说，就是多种形态，具体点就是去完成某个行为，当不同的对象去完成时会产生出不同的状态。

2.多态的定义和实现
	（1）多态定义的构成条件：
		- 多态是当不同继承关系的类对象，去调用同一函数，产生了不同的行为。
		- 在继承中要构成多态还有两个条件：
			- 调用函数的对象必须是指针或者引用，
			- 被调用的函数必须是虚函数，并且完成了虚函数的重写。

		- 虚函数的概念：
			- 虚函数：就是在类的成员函数的前面加virtual关键字，

		- 虚函数的重写：
			- 派生类中有一个跟基类完全相同的虚函数，我们就称子类的虚函数重写了基类的虚函数。完
				全相同是指：函数名、参数、返回值都相同。另外虚函数的重写也叫作虚函数的覆盖。

		- 虚函数重写的例外：协变
			- 重写的虚函数的返回值可以不同，但是必须分别是基类指针和派生类指针或者基类
				引用和派生类引用。

		- 不规范的重写行为：
			- 在派生类中重写的成员函数可以不加virtual关键字，也是构成重写的，因为继承后基类的虚函数
				被继承下来了在派生类依旧保持虚函数属性，我们只是重写了它。但是这是非常不规范的，

		- 析构函数的重写问题：
			- 基类中的析构函数如果是虚函数，那么派生类的析构函数就重写了基类的析构函数。这里他们的
				函数名不相同，看起来违背了重写的规则，其实不然，这里可以理解为编译器对析构函数
				的名称做了特殊处理，编译后析构函数的名称统一处理成destructor，这也说明了基类的
				析构函数最好写成虚函数。
			- 只有派生类的析构函数重写了基类的析构函数，在delete对象调用析构函数时，才能构成多态，才
				能保证p1和p2指向的对象正确的调用析构函数。

		- 接口继承和实现继承：
			- 普通函数的继承是一种实现继承，派生类继承了基类函数，可以使用函数，继承的是函数的实现；
				虚函数的继承是一种接口继承，派生类继承的是基类虚函数的接口，目的是为了重写，达成
				多态，继承的是接口。所以如果不实现多态，不要把函数定义成虚函数。

3.纯虚函数、抽象类
	（1）概念：
		- 在虚函数的后面写上 =0，则这个函数为纯虚函数，
		- 包含纯虚函数的类叫做抽象类（也叫接口类），
		- 抽象类不能实例化出对象，派生类继承后也不能实例化出对象，只有重写纯虚函数，派生类才能实例化
			出对象，
		- 纯虚函数规范了派生类必须重写，而且纯虚函数更体现出了接口继承。

4.C++11 override 和 final
	（1）final 修饰基类的虚函数不能被派生类重写，

	（2）override 修饰派生类虚函数强制完成重写，如果没有重写会编译报错。

5.多态的原理
	（1）虚函数表：
		- 一个含有虚函数的类中都至少都有一个虚函数表指针，因为虚函数的地址要被放到虚函数表中，虚函数表
			也简称虚表。这个虚函数表指针可能在对象前面，也可能在对象后面，取决于平台。

		- 通过测试和观察，我们知道：
			- 派生类对象d中也有一个虚表指针，d对象由两部分构成，一部分是父类继承下来的成员，虚表指针也就
				是存在在这部分的，另一部分是自己的成员。
			- 基类b对象和派生类d对象虚表是不一样的，这里我们发现Func1完成了重写，所以d的虚表中存的是重
				写的Derive::Func1，所以虚函数的重写也叫作覆盖，覆盖就是指虚表中虚函数的覆盖。重写
				是语法层的叫法，覆盖是原理层的叫法。
			- 另外Func2继承下来后是虚函数，所以放进了虚表，Func3也继承下来了，但是不是虚函数，所以不会
				放进虚表。
			- 虚函数表本质是一个存虚函数指针的指针数组，这个数组最后面放了一个nullptr。
			- 总结一下派生类的虚表生成：
				a.先将基类中的虚表内容拷贝一份到派生类虚表中，
				b.如果派生类重写了基类中某个虚函数，用派生类自己的虚函数覆盖虚表中基类的虚函数，
				c.派生类自己新增加的虚函数按其在派生类中的声明次序增加到派生类虚表的最后。
			- 注意虚表存的是虚函数指针，不是虚函数，虚函数和普通函数一样的，都是存在代码段的，只是
				他的指针又存到了虚表中。另外对象中存的不是虚表，存的是虚表指针。vs下虚表存在在
				数据段。

	（2）多态的原理：
		- 满足多态以后的函数调用，不是在编译时确定的，是运行起来以后到对象的中去找的。

		- 动态绑定和静态绑定：
			- 静态绑定又称为前期绑定(早绑定)，在程序编译期间确定了程序的行为，也称为静态多态，
				比如：函数重载；
			- 动态绑定又称后期绑定(晚绑定)，是在程序运行期间，根据具体拿到的类型确定程序的具体行为，
				调用具体的函数，也称为动态多态。

6.单继承和多继承关系的虚函数表
	（1）单继承中的虚函数表

	（2）多继承中的虚函数表：
		- 多继承派生类的未重写的虚函数放在第一个继承基类部分的虚函数表中。

	（3）菱形继承、菱形虚拟继承
		- 实际中不建议设计出菱形继承、菱形虚拟继承
		- 原因：
			- 设计复杂，容易出问题，
			- 这样的模型，在访问基类成员时有一定的性能损耗。



