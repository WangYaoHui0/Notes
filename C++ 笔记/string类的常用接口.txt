1.string类的常用接口说明
	（1）string类对象的常见构造：
		- string()			- 构造空的string类对象，及空字符串
		- string(const char* s)		- 用C-string来构造string类对象
		- string(size_t n, char c)	- string类对象中包含n个字符c
		- string(const string& s)	- 拷贝构造函数
		- string(const string& s, size_t n)	- 将s中的前n个字符除去，用剩下的字符构造新的string类对象

	（2）string类对象的容量操作：
		- size_t size() const		- 返回字符串有效字符长度
		- size_t length() const		- 返回字符串有效字符长度
		- size_t capacity() const	- 返回空间总大小
		- bool empty() const		- 检测字符串是否为空串，是返回true，否则返回false
		- void clear()			- 清空有效字符串
		- void resize(size_t n, char c) - 将有效字符的个数改为n，多出的空间用字符c填充
		- void resize(size_t n)		- 将有效字符的个数改为n，多出的空间用0填充
		- void reserve(size_t res_arg = 0)	- 为字符串预留空间

		注：
			- size()和length()底层实现原理完全相同，引入size()的原因是为了与其他容器的接口
				保持一致，
			- clear()只是将string中有效字符清空，不改变底层空间大小，
			- resize 在改变元素个数时，如果是将元素个数增多，可能会改变底层容量的大小，如果
				是将元素个数减少，底层空间总大小不变，
			- reserve：为string预留空间，不改变有效元素个数，当其参数小于string的底层空间
				总大小时，reserve不会改变容量大小。

	（3）string类对象的访问操作：
		- char& operator[](size_t pos)			- 返回pos位置的字符，非const string类对象调用
		- const char& operator[](size_t pos) const	- 返回pos位置的字符，const string类对象调用

	（4）string类对象的修改操作：
		- void push_back(char c)			- 尾插字符c
		- string& append(const char* s)			- 追加一个字符串
		- string& operator+=(const string& str)		- 追加字符串str
		- string& operator+=(const char* s)		- 追加C风格字符串
		- string& operator+=(char c)			- 追加字符c
		- const char* c_str() const			- 返回C风格字符串
		- size_t find(char c, size_t pos = 0) const	- 从pos位置开始往后找字符c，返回该字符在字符串
									中的位置
		- size_t rfind(char c, size_t pos = npos)	- 从pos位置开始往前找字符c，返回该字符在字符串
									中的位置
		- string substr(size_t pos = 0, size_t n = npos) const		- 从pos位置开始，截取n个字符，
											然后将其返回
		注：
			- npos是string里面的一个静态成员变量，	// static const size_t pos = -1;
			- 在string尾部追加字符时，s.push_back(c)/s.append(1, c)/s += 'c'三种的实现方式相差不大；
			- 对string操作时，如果能够大概预估到放多少字符，可以先通过reverse把空间预留好。

	（5）string类非成员函数：
		- operator+	- 效率较低，建议少用
		- operator>>	- 输入运算符重载
		- operator<<	- 输出运算符重载
		- getline	- 获取一行字符串
		- relational operators	-大小比较



