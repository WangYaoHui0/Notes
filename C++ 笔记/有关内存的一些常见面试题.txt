1.内存常见面试题
	（1）malloc/free 和 new/delete 的区别：
		- 共同点：
			- 都是从堆上申请空间，并且需要用户手动释放；
		- 不同点：
			- malloc/free 是函数，new/delete 是操作符，
			- malloc 申请的空间不会初始化，new 可以初始化，
			- malloc 申请空间时，需要手动计算空间大小并传递，new 只需在其后跟上空间的类型即可，
			- malloc 的返回值是void*，在使用时必须强转，new 不需要，因为new 后跟的是空间的类型，
			- malloc 申请空间失败时，返回的是NULL，因此使用时必须判空，new 不需要判空，但是new
				需要捕获异常，
			- 申请自定义类型对象时，malloc/free只会开辟空间，不会调用构造函数和析构函数，而new
				在申请空间后会调用构造函数完成对象的初始化，delete 在释放空间前会调用析构
				函数完成空间中资源的清理，
			- new/delete 比 malloc/free 的效率稍微低点，因为new/delete 在底层封装了malloc/free。

	（2）设计一个类，该类只能在堆上创建对象：
		- 方法：构造函数私有化
			- 将类的构造函数私有，拷贝构造声明成私有，防止别人调用拷贝在栈上生成对象，
			- 提供一个静态的成员函数，在该静态成员函数中，完成堆对象的创建。

	（3）设计一个类，该类只能在栈上创建对象：
		- 方法一：
			- 将构造函数私有，提供一个静态的成员函数，在其中完成栈对象的创建；
		- 方法二：
			- 要求只在栈上创建对象，不能在堆上创建，因此只要屏蔽掉new的功能即可，
			- 即屏蔽掉 operator new 和 定位new表达式，注：屏蔽掉 operator new，实际也将定位new
				屏蔽了。

	（4）单例模式：
		- 设计模式的概念：
			设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。
		- 使用设计模式的目的：
			为了代码可重用性、让代码更容易被他人理解、保证代码可靠性。设计模式使代码编写真正
				工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。
		- 单例模式的概念：
			一个类只能创建一个对象，即单例模式，该模式可以保证系统中该类只有一个实例，并提供一
				个访问它的全局访问点，该实例被所有程序模块共享。
		- 单例模式有两种实现模式：
			- 饿汉模式：
				- 就是不管你以后用不用，程序启动时就创建一个唯一的实例对象；
				- 优点：
					- 简单，
					- 如果这个单例对象在多线程高并发环境下频繁使用，性能要求较高，那么
						明显使用饿汉模式来避免资源竞争，提高响应速度更好；
				- 缺点：可能会导致进程启动慢，且如果有多个单例，类对象实例启动顺序不确定；

			- 懒汉模式：
				- 如果单例对象构造十分耗时或者占用很多资源，如加载插件、初始化网络连接、读
					取文件等，而有可能该对象程序运行时不会用到，那么也要在程序一开始就
					进行初始化，就会导致程序启动时非常的缓慢。所以这种情况下使用懒汉模
					式（延迟加载）更好；
				- 优点：
					- 第一次使用实例对象时，创建对象。进程启动无负载。多个单例实例启动
						顺序自由控制；
				- 缺点：
					- 复杂。

	（5）内存泄露：
		- 内存泄露的概念：
			- 内存泄露指因为疏忽或者错误造成程序未能释放已经不再使用的内存的情况。内存泄漏并不
				是指内存在物理上的消失，而是应用程序分配某段内存后，因为设计错误，失去了对
				该段内存的控制，因而造成了内存的浪费。

		- 内存泄露分类，C/C++ 程序中一般我们关心两种方面的内存泄露：
			- 堆内存泄露（Heap Leak）：
				- 堆内存指的是程序执行中依据需要分配,通过 malloc/calloc/realloc/new 等从堆
					中分配的一块内存，用完后必须通过调用相应的 free/delete 删掉。假设
					程序的设计错误导致这部分内存没有被释放，那么以后这部分空间将无法再
					被使用，就会产生 Heap Leak。
			- 系统资源泄露：
				- 指程序使用系统分配的资源，如套接字、文件描述符、管道等没有使用对应的函数
					释放掉，导致系统资源的浪费，严重可导致系统效能减少，系统执行不稳定。

		- 如何检测内存泄露：
			- 课件

		- 如何避免内存泄露：
			- 工程前期良好的设计规范，养成良好的编码规范，申请的内存空间记着匹配的去释放。但如果
				碰上异常时，即便注意释放了，还是会出现问题，这就需要下一条智能指针来管理才有
				保证；
			- 采用RAII思想或者智能指针来管理资源；
			- 有些公司内部规范使用内部实现的私有内存管理库。这套库自带内存泄露检测的功能选项；
			- 出问题了使用内存泄露工具检测。

		- 总结如下：
			- 内存泄露非常常见，解决方案分为两种：
				- 事前预防型，如智能指针等；
				- 事后查错型，如泄露检测工具。

	（6）如何一次在堆上申请4G的内存?