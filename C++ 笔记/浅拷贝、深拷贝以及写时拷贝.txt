1.浅拷贝、深拷贝、写时拷贝
	（1）经典的string类问题：
		- 模拟实现string类，实现string类的构造、拷贝构造、赋值运算符重载以及析构函数等；
		- 当用s1构造s2时，若调用默认的拷贝构造，会导致s1、s2共用同一块内存空间，在释放时同一块空间被释放
			多次而引起程序崩溃。这种拷贝方式，称为浅拷贝。

	（2）浅拷贝：
		- 浅拷贝：也称位拷贝。
		- 编译器只是将对象中的值拷贝过来，如果对象中管理资源，最后就会导致多个对象共享同一份资源，当一个
			对象销毁时就会将该资源释放掉，而此时另一些对象不知道该资源已经被释放，认为还有效，所以
			当继续对资源进行操作时，就会发生访问违规；
		- C++中引入深拷贝来解决浅拷贝的问题。

	（3）深拷贝：
		- 如果一个类中涉及到资源管理，其拷贝构造函数、赋值运算符重载以及析构函数必须要显示给出，一般都是
			按照深拷贝方式提供；
		- 深拷贝：给每个对象独立分配资源，保证多个对象之间不会因共享资源而造成多次释放，导致程序崩溃问题。

	（4）写时拷贝：
		- 写时拷贝就类似于拖延症，它是在浅拷贝的基础之上增加了引用计数的方式来实现的；
		- 引用计数：用来记录资源使用者的个数。在构造时，将资源的计数给成1，每增加一个对象使用该资源，就给
			计数加1，当某个对象被销毁时，先给该计数减1，然后再检测是否需要释放资源，如果计数为1，说明
			该对象是资源的最后一个使用者，将该资源释放；否则不能释放，因为还有其他对象在使用该资源。