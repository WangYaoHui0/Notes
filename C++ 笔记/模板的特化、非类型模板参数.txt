1.模板的特化
	（1）概念：
		- 通常，使用模板可以实现一些与类型无关的代码，但对于一些特殊类型的可能会得到一些错误的结果，
			因此就需要对模板进行特化。即：在原模板类的基础上，针对特殊类型所进行特殊化的实现
			方式。模板特化中分为函数模板特化与类模板特化。

	（2）函数模板特化：
		- 函数模板的特化步骤：
			- 必须要先有一个基础的函数模板，
			- 关键字template后面接一对空的尖括号<>，
			- 函数名后跟一对尖括号，尖括号中指定需要特化的类型，
			- 函数形参表:必须要和模板函数的基础参数类型完全相同，如果不同编译器可能会报一
				些奇怪的错误。

		- 注：
			- 一般情况下如果函数模板遇到不能处理或者处理有误的类型，为了实现简单通常都是将
				该函数直接给出。

	（3）类模板特化：
		- 全特化：
			- 全特化即是将模板参数列表中所有的参数都确定化。

		- 偏特化：任何针对模版参数进一步进行条件限制设计的特化版本。
			- 偏特化有两种表现方式：
				- 部分特化：
					- 将模板参数列表中的一部分参数特化

				- 参数更进一步的限制：
					- 将参数偏特化为指针类型、引用类型等。

			- 偏特化并不仅仅是指特化部分参数，而是针对模板参数更进一步的条件限制所设计出来的
				一个特化版本。

2.非类型模板参数
	（1）模板参数分为：类型形参与非类型形参
		- 类型形参：出现在模板参数列表中，跟在class或者typename之后的参数类型名称，
		- 非类型形参：就是用一个常量作为类(函数)模板的一个参数，在类(函数)模板中可将该参数当成
			常量来使用。

		- 注：
			- 浮点数、类对象以及字符串是不允许作为非类型模板参数的，
			- 非类型的模板参数必须在编译期就能确认结果。


