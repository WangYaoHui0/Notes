1.list和vector的对比
		vector							list
底层结构：	- 动态顺序表，一段连续的空间				- 带头节点的双向循环链表
随机访问：	- 支持随机访问，访问某个元素效率O(1)			- 不支持随机访问，访问某个元素效率O(N)
插入删除：	- 任意位置插入和删除效率低，需要搬移元素，		- 任意位置插入和删除效率高，不需要搬移元素，
			时间复杂度O(N)，插入时有可能需要			时间复杂度为O(1)
			增容，增容：开辟新空间，拷贝元素，
			释放旧空间，导致效率更低
空间利用率：	- 底层为连续空间，不容易造成内存碎片，空间		- 底层节点动态开辟，小节点容易造成内存碎片，
			利用率高，缓存利用率高					空间利用率低，缓存利用率低
迭代器：	- 原生态指针						- 对原生态指针（节点指针）进行封装
迭代器失效：	- 在插入元素时，要给所有的迭代器重新赋值，		- 插入元素不会导致迭代器失效，删除元素时，只会
			因为插入元素有可能会导致重新扩容，			导致当前迭代器失效，其他迭代器不受影响
			致使原来的迭代器失效；删除时，当前
			位置及以后的迭代器需要重新赋值，否
			则会失效
使用场景：	- 需要高效存储，支持随机访问，不关心插入		- 大量插入和删除操作，不关心随机访问
			删除效率